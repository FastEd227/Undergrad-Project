import random
from collections import defaultdict


##this version shows the simulation working of what each player ends with and when their things get rolled


class CatanSimulation:
    """
    A simplified simulation of Settlers of Catan focusing on settlement placement
    and resource generation.  This version excludes player trading.
    """

    def __init__(self, board_layout, num_turns=100, resource_values=None):
        """
        Initializes the simulation.

        Args:
            board_layout (dict):  A dictionary representing the game board.
                Keys are hex coordinates (tuples), and values are dictionaries
                with 'resource' (string) and 'number' (int).
            num_turns (int): The number of turns to simulate.
            resource_values (dict): A dictionary specifying the value of each resource.
        """
        self.board = board_layout
        self.num_turns = num_turns
        self.settlements = {}  # Player: [(x, y, position)]  position is 0-5
        self.resources = defaultdict(int)
        self.production_history = defaultdict(lambda: defaultdict(int))
        self.resource_values = resource_values or {
            'wood': 1,
            'brick': 1,
            'sheep': 1,
            'wheat': 2,
            'ore': 2,
            'desert': 0
        }
        self.player_resources = defaultdict(lambda: defaultdict(list))  # Store resources per player and turn
        self.dice_rolls = []  # List to store dice rolls
        self.turn_count = 0

        # Precalculate valid settlement locations
        self.valid_settlement_locations = self.get_valid_settlement_locations()

    def get_valid_settlement_locations(self):
        """
        Calculates the valid settlement locations based on the board layout.
        A settlement location is valid if it is at the corner of 3 hexes.
        """
        locations = set()
        for x, y in self.board:
            # Define the six corners of a hexagon
            corners = [
                (x - 1, y - 1), (x - 1, y), (x, y + 1),
                (x + 1, y + 1), (x + 1, y), (x, y - 1)
            ]
            for i in range(6):
                loc = (x,y,i)
                locations.add(loc)
        return list(locations)

    def is_valid_settlement_location(self, location):
        """
        Checks if a given location is a valid settlement location.

        Args:
            location (tuple): The (x, y, position) of the settlement.

        Returns:
            bool: True if the location is valid, False otherwise.
        """
        return location in self.valid_settlement_locations

    def place_settlement(self, player, location):
        """
        Places a settlement for a player at the specified location.

        Args:
            player (int): The player ID.
            location (tuple): The (x, y, position) of the settlement.
        """
        if not self.is_valid_settlement_location(location):
            raise ValueError(f"Invalid settlement location: {location}")
        if player not in self.settlements:
            self.settlements[player] = []
        self.settlements[player].append(location)

    def roll_dice(self):
        """
        Simulates rolling two six-sided dice.

        Returns:
            int: The sum of the dice rolls.
        """
        roll = random.randint(1, 6) + random.randint(1, 6)
        self.dice_rolls.append(roll)  # Store the dice roll
        return roll

    def produce_resources(self, roll):
        """
        Distributes resources based on the dice roll and settlement locations.

        Args:
            roll (int): The result of the dice roll.
        """
        produced = defaultdict(int)
        for player, settlement_locs in self.settlements.items():
            for loc in settlement_locs:
                x, y, pos = loc
                #find the 3 tiles that this settlement is connected to.
                tiles = self.get_connected_tiles(x,y,pos)
                for tile_x, tile_y in tiles:
                    if (tile_x,tile_y) in self.board and self.board[(tile_x,tile_y)]['number'] == roll:
                        resource = self.board[(tile_x,tile_y)]['resource']
                        self.resources[resource] += 1
                        self.player_resources[player][resource].append(self.turn_count)  # Store turn with resource
                        produced[resource] += 1
        return produced

    def get_connected_tiles(self, x, y, position):
        """
        Gets the coordinates of the three tiles connected to a settlement.

        Args:
            x (int): x coordinate of the settlement.
            y (int): y coordinate of the settlement.
            position (int): The position (0-5) of the settlement around the hex.

        Returns:
            list: A list of (tile_x, tile_y) tuples representing the connected tiles.
        """
        if position == 0:
            return [(x, y), (x - 1, y - 1), (x - 1, y)]
        elif position == 1:
            return [(x, y), (x - 1, y), (x, y + 1)]
        elif position == 2:
            return [(x, y), (x, y + 1), (x + 1, y + 1)]
        elif position == 3:
            return [(x, y), (x + 1, y + 1), (x + 1, y)]
        elif position == 4:
            return [(x, y), (x + 1, y), (x, y - 1)]
        elif position == 5:
            return [(x, y), (x, y - 1), (x - 1, y - 1)]
        else:
            return []  # Invalid position

    def trade_with_bank(self):
        """
        Allows the player to trade excess resources with the bank at a 4:1 ratio.
        """
        for resource, amount in list(self.resources.items()):
            if amount >= 4:
                trade_amount = amount // 4
                self.resources[resource] -= trade_amount * 4
                tradeable_resources = [r for r in self.board.values()]
                if tradeable_resources:
                    received_resource = random.choice(tradeable_resources)['resource']
                    self.resources[received_resource] += trade_amount

    def run_simulation(self, strategy_player_1="most_common_roll", strategy_player_2="most_valuable_resource"):
        """
        Runs the simulation for the specified number of turns using the given
        settlement placement strategies for two AI players.

        Args:
            strategy_player_1 (str): The settlement placement strategy for Player 1.
            strategy_player_2 (str): The settlement placement strategy for Player 2.
        """
        # 1. Settlement Placement Phase
        initial_settlements = 2  # Each player places two initial settlements
        for i in range(initial_settlements):
            if strategy_player_1 == "most_common_roll":
                settlement_location_p1 = self.choose_settlement_by_most_common_roll(player=1,placed_settlements=self.settlements.get(1,[]))
                self.place_settlement(1, settlement_location_p1)
            elif strategy_player_1 == "most_valuable_resource":
                settlement_location_p1 = self.choose_settlement_by_most_valuable_resource(player=1,placed_settlements=self.settlements.get(1,[]))
                self.place_settlement(1, settlement_location_p1)
            else:
                raise ValueError(f"Invalid strategy for Player 1: {strategy_player_1}")

            if strategy_player_2 == "most_common_roll":
                settlement_location_p2 = self.choose_settlement_by_most_common_roll(player=2,placed_settlements=self.settlements.get(2,[]))
                self.place_settlement(2, settlement_location_p2)
            elif strategy_player_2 == "most_valuable_resource":
                settlement_location_p2 = self.choose_settlement_by_most_valuable_resource(player=2,placed_settlements=self.settlements.get(2,[]))
                self.place_settlement(2, settlement_location_p2)
            else:
                raise ValueError(f"Invalid strategy for Player 2: {strategy_player_2}")

        # 2. Resource Production Phase
        self.turn_count = 0  # Initialize turn counter
        for turn in range(self.num_turns):
            self.turn_count = turn + 1
            roll = self.roll_dice()
            produced = self.produce_resources(roll)
            self.production_history[turn] = produced
            self.trade_with_bank()

        # 3. Data Collection and Analysis
        self.display_results()

    def choose_settlement_by_most_common_roll(self, player, placed_settlements):
        """
        Chooses a settlement location based on the most common dice rolls (6 and 8).
        It will choose a location that is connected to a 6 or 8 tile and is not already occupied.

        """
        best_locations = []
        for location in self.valid_settlement_locations:
            x, y, pos = location
            tiles = self.get_connected_tiles(x, y, pos)
            for tile_x, tile_y in tiles:
                if (tile_x,tile_y) in self.board and self.board[(tile_x, tile_y)]['number'] in [6, 8] and location not in placed_settlements:
                    best_locations.append(location)
                    break
        if best_locations:
            return best_locations[0]  #return the first valid location
        else:
            available_locations = [loc for loc in self.valid_settlement_locations if loc not in placed_settlements]
            if available_locations:
                return random.choice(available_locations)
            else:
                return None

    def choose_settlement_by_most_valuable_resource(self, player, placed_settlements):
        """
        Chooses a settlement location based on the resource value.  It will choose a
        location that is connected to a tile with the most valuable resource and is not already occupied.
        """
        best_locations = []
        for location in self.valid_settlement_locations:
            x, y, pos = location
            tiles = self.get_connected_tiles(x, y, pos)
            for tile_x, tile_y in tiles:
                if (tile_x,tile_y) in self.board:
                    resource = self.board[(tile_x, tile_y)]['resource']
                    if location not in placed_settlements:
                        best_locations.append(location)
                        break
        if best_locations:
            location_values = {}
            for location in best_locations:
                x,y,pos = location
                tiles = self.get_connected_tiles(x,y,pos)
                for tile_x, tile_y in tiles:
                    if (tile_x,tile_y) in self.board:
                         resource = self.board[(tile_x, tile_y)]['resource']
                         value = self.resource_values[resource]
                         location_values[location] = value
            sorted_locations = sorted(location_values, key=location_values.get, reverse=True)
            return sorted_locations[0]
        else:
            available_locations = [loc for loc in self.valid_settlement_locations if loc not in placed_settlements]
            if available_locations:
                return random.choice(available_locations)
            else:
                return None

    def display_results(self):
        """
        Displays the results of the simulation in a more human-readable format.
        """
        print("--- Simulation Results ---")
        print("Settlements:")
        for player, locations in self.settlements.items():
            print(f"  Player {player}: {locations}")

        print("\nDice Rolls:")
        for turn, roll in enumerate(self.dice_rolls):
            print(f"  Turn {turn + 1}: {roll}")

        print("\nTotal Resources Produced:")
        if not self.production_history:
            print("  No resources produced in any turn.")
        else:
            for turn, production in self.production_history.items():
                print(f"  Turn {turn + 1}:")
                if not production:
                    print("    None")
                else:
                    for resource, amount in production.items():
                        print(f"    {resource}: {amount}")

        print("\nFinal Resources:")
        if not self.resources:
            print("  No resources remaining.")
        else:
            for resource, amount in self.resources.items():
                print(f"  {resource}: {amount}")

        print("\nPlayer Resources and Acquisition Turns:")
        for player in self.player_resources:
            print(f"\n  Player {player} Resources:")
            if not self.player_resources[player]:
                print("    No resources.")
            else:
                for resource, turns in self.player_resources[player].items():
                    print(f"    {resource}: {len(turns)}, acquired on turns {turns}") #added length
                    if not turns:
                        print("      None")
                    else:
                        for turn in turns:
                            print(f"      Turn {turn}")


if __name__ == "__main__":
    # Example board layout (standard Catan board - simplified for demonstration)
    board_layout = {
        (0, 0): {'resource': 'wood', 'number': 5},
        (0, 1): {'resource': 'brick', 'number': 6},
        (0, 2): {'resource': 'sheep', 'number': 8},
        (1, 0): {'resource': 'wheat', 'number': 3},
        (1, 1): {'resource': 'ore', 'number': 4},
        (1, 2): {'resource': 'desert', 'number': 7},
        (2, 0): {'resource': 'wood', 'number': 2},
        (2, 1): {'resource': 'brick', 'number': 5},
        (2, 2): {'resource': 'sheep', 'number': 9},
        (3, 0): {'resource': 'wheat', 'number': 4},
        (3, 1): {'resource': 'ore', 'number': 6},
        (3, 2): {'resource': 'wood', 'number': 9},
        (4, 0): {'resource': 'brick', 'number': 3},
        (4, 1): {'resource': 'sheep', 'number': 8},
        (4, 2): {'resource': 'wheat', 'number': 10},
        (5,0): {'resource': 'ore', 'number': 11},
        (5,1): {'resource': 'desert', 'number': 12},
        (5,2): {'resource': 'wood', 'number': 2}
    }

    num_turns = 200
    # Define resource values
    resource_values = {
        'wood': 0.781,
        'brick': 0.781,
        'sheep': 0.760,
        'wheat': 1.350,
        'ore': 1.329,
        'desert': 0
    }

    simulation = CatanSimulation(board_layout, num_turns, resource_values)

    # Run simulation with the two AI players using different strategies
    simulation.run_simulation(strategy_player_1="most_common_roll", strategy_player_2="most_valuable_resource")
