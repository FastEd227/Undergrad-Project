import numpy as np
import matplotlib.pyplot as plt
import random

def catan_simulator(num_simulations, num_turns, board, player_settlements, player_cities):
    """
    Simulates multiple Catan games and collects data for statistical analysis.

    Args:
        num_simulations: The number of games to simulate.
        num_turns: The number of turns to simulate per game.
        board:  A dictionary representing the Catan board.
        player_settlements: A dictionary where keys are player numbers and values are
                          lists of hex IDs where they have settlements.
        player_cities:  A dictionary where keys are player numbers and values are
                          lists of hex IDs where they have cities.

    Returns:
        A dictionary containing the collected data:
        {
            'resource_history': {player_number: {resource_type: [resource_amounts_per_turn]}},
            'settlement_history': {player_number: [settlement_counts_per_turn]},
            'city_history': {player_number: [city_counts_per_turn]},
            'game_lengths': [game_lengths]
        }
    """
    all_data = {
        'resource_history': {},
        'settlement_history': {},
        'city_history': {},
        'game_lengths': []
    }

    num_players = len(player_settlements)  # Determine the number of players

    for player_number in range(1, num_players + 1):
        all_data['resource_history'][player_number] = {
            'wood': [],
            'brick': [],
            'sheep': [],
            'wheat': [],
            'ore': []
        }
        all_data['settlement_history'][player_number] = []
        all_data['city_history'][player_number] = []

    for simulation in range(num_simulations):
        print(f"Starting simulation {simulation + 1}/{num_simulations}")
        game_state = {  # Initialize game state for each simulation
            'board': board,
            'player_settlements': player_settlements,
            'player_cities': player_cities,
            'player_resources': {player_number: {'wood': 0, 'brick': 0, 'sheep': 0, 'wheat': 0, 'ore': 0}
                                 for player_number in range(1, num_players + 1)},
            'game_over': False,
            'turn': 0
        }

        while not game_state['game_over'] and game_state['turn'] < num_turns:
            game_state['turn'] += 1
            #print(f"Turn {game_state['turn']}")

            # Dice roll
            dice_roll = random.randint(2, 12)

            # Resource production for each player
            for player_number in range(1, num_players + 1):
                resources_produced = resource_production(game_state['board'], game_state['player_settlements'], game_state['player_cities'], dice_roll, player_number)
                #print(f"  Player {player_number} produced: {resources_produced}")
                for resource, amount in resources_produced.items():
                    game_state['player_resources'][player_number][resource] += amount
                    # Store the resource amount for the current turn
                    all_data['resource_history'][player_number][resource].append(game_state['player_resources'][player_number][resource])

                # Record settlement and city counts
                all_data['settlement_history'][player_number].append(len(game_state['player_settlements'][player_number]))
                all_data['city_history'][player_number].append(len(game_state['player_cities'][player_number]))

            # Simplified Trading (Bank only, for demonstration)
            for player_number in range(1, num_players + 1):
                if game_state['player_resources'][player_number]['wood'] >= 4:
                    game_state['player_resources'][player_number]['wood'] -= 4
                    game_state['player_resources'][player_number]['brick'] += 1

            # Simplified Building (Settlements only, for demonstration)
            for player_number in range(1, num_players + 1):
                if game_state['player_resources'][player_number]['wood'] >= 1 and \
                   game_state['player_resources'][player_number]['brick'] >= 1 and \
                   game_state['player_resources'][player_number]['sheep'] >= 1 and \
                   game_state['player_resources'][player_number]['wheat'] >= 1:
                    if len(game_state['player_settlements'][player_number]) < 5:  #limit settlements
                        game_state['player_resources'][player_number]['wood'] -= 1
                        game_state['player_resources'][player_number]['brick'] -= 1
                        game_state['player_resources'][player_number]['sheep'] -= 1
                        game_state['player_resources'][player_number]['wheat'] -= 1
                        game_state['player_settlements'][player_number].append(len(game_state['player_settlements'][player_number]) + 1) #simplified settlement placement
            # Win condition (simplified)
            for player_number in range(1, num_players + 1):
                victory_points = len(game_state['player_settlements'][player_number]) + (2 * len(game_state['player_cities'][player_number]))
                if victory_points >= 10:
                    game_state['game_over'] = True
                    #print(f"Player {player_number} wins!")
                    break
        all_data['game_lengths'].append(game_state['turn'])
    return all_data

def resource_production(board, player_settlements, player_cities, dice_roll, player_number):
    """
    Simulates resource production in Catan for a specific player.

    Args:
        board:  Dictionary: {hex_id: (resource_type, number_token)}
        player_settlements: Dictionary: {player_number: [hex_ids]}
        player_cities: Dictionary: {player_number: [hex_ids]}
        dice_roll: int (2-12)
        player_number: int
    Returns:
        Dictionary: {resource_type: amount}
    """
    resources = {'wood': 0, 'brick': 0, 'sheep': 0, 'wheat': 0, 'ore': 0}

    if player_number in player_settlements:
        for hex_id in player_settlements[player_number]:
            if hex_id in board:
                resource_type, number_token = board[hex_id]
                if number_token == dice_roll:
                    resources[resource_type] += 1

    if player_number in player_cities:
        for hex_id in player_cities[player_number]:
            if hex_id in board:
                resource_type, number_token = board[hex_id]
                if number_token == dice_roll:
                    resources[resource_type] += 2
    return resources

def analyze_simulation_data(data):
    """
    Analyzes the data collected from the Catan simulations.

    Args:
        data: A dictionary containing the collected data (returned by catan_simulator).

    Returns:
        None.  Prints the analysis results.
    """
    num_players = len(data['resource_history'])

    print("\n--- Simulation Analysis ---")
    for player_number in range(1, num_players + 1):
        print(f"\nPlayer {player_number}:")
        print("  Average Resource Counts:")
        for resource_type in ['wood', 'brick', 'sheep', 'wheat', 'ore']:
            resource_history = data['resource_history'][player_number][resource_type]
            #  Calculate the average resource count across all turns.
            avg_resource = np.mean(resource_history)
            print(f"    {resource_type}: {avg_resource:.2f}")

        print("  Resource Count Variance:")
        for resource_type in ['wood', 'brick', 'sheep', 'wheat', 'ore']:
            resource_history = data['resource_history'][player_number][resource_type]
            resource_variance = np.var(resource_history)
            print(f"    {resource_type}: {resource_variance:.2f}")

        settlement_history = data['settlement_history'][player_number]
        avg_settlements = np.mean(settlement_history)
        variance_settlements = np.var(settlement_history)
        print(f"  Avg Settlements: {avg_settlements:.2f}, Variance: {variance_settlements:.2f}")

        city_history = data['city_history'][player_number]
        avg_cities = np.mean(city_history)
        variance_cities = np.var(city_history)
        print(f"  Avg Cities: {avg_cities:.2f}, Variance: {variance_cities:.2f}")

    game_lengths = data['game_lengths']
    avg_game_length = np.mean(game_lengths)
    variance_game_length = np.var(game_lengths)
    print(f"\nAverage Game Length: {avg_game_length:.2f} turns")
    print(f"Game Length Variance: {variance_game_length:.2f} turns")



def calculate_stability_metrics(data):
    """
    Calculates metrics to help quantify the stability of the Catan game simulation.

    Args:
        data: The data dictionary returned by catan_simulator.

    Returns:
        A dictionary containing stability metrics:
        {
            'resource_stability': {player_number: float},  # Average resource variance per player
            'structure_stability': {player_number: float}, # Average settlement and city variance per player
            'game_length_stability': float               # Variance of game lengths
        }
    """
    num_players = len(data['resource_history'])
    stability_metrics = {
        'resource_stability': {},
        'structure_stability': {},
        'game_length_stability': 0
    }

    for player_number in range(1, num_players + 1):
        resource_variances = []
        for resource_type in ['wood', 'brick', 'sheep', 'wheat', 'ore']:
            resource_history = data['resource_history'][player_number][resource_type]
            resource_variance = np.var(resource_history)
            resource_variances.append(resource_variance)
        stability_metrics['resource_stability'][player_number] = np.mean(resource_variances)

        settlement_variance = np.var(data['settlement_history'][player_number])
        city_variance = np.var(data['city_history'][player_number])
        stability_metrics['structure_stability'][player_number] = np.mean([settlement_variance, city_variance])

    stability_metrics['game_length_stability'] = np.var(data['game_lengths'])

    return stability_metrics



def plot_resource_trends(data, player_number):
    """
    Plots the resource trends for a specific player over the simulated turns.

    Args:
        data: A dictionary containing the collected data (returned by catan_simulator).
        player_number: The player number to plot the resource trends for.
    """
    plt.figure(figsize=(12, 6))
    plt.title(f"Resource Trends for Player {player_number}")
    plt.xlabel("Turn")
    plt.ylabel("Resource Amount")

    for resource_type, resource_history in data['resource_history'][player_number].items():
        plt.plot(resource_history, label=resource_type)

    plt.legend()
    plt.grid(True)
    plt.show()

def plot_settlement_city_trends(data, player_number):
    """
    Plots the settlement and city trends for a specific player.

    Args:
        data: A dictionary containing the collected data.
        player_number: The player number.
    """
    plt.figure(figsize=(12, 6))
    plt.title(f"Settlement and City Trends for Player {player_number}")
    plt.xlabel("Turn")
    plt.ylabel("Number of Structures")

    plt.plot(data['settlement_history'][player_number], label='Settlements')
    plt.plot(data['city_history'][player_number], label='Cities')

    plt.legend()
    plt.grid(True)
    plt.show()

if __name__ == "__main__":
    # 1. Define the game board, player settlements, and cities (as in the previous examples)
    catan_board = {
        1: ('wood', 2),
        2: ('brick', 3),
        3: ('sheep', 4),
        4: ('wheat', 5),
        5: ('ore', 6),
        6: ('wood', 8),
        7: ('brick', 9),
        8: ('sheep', 10),
        9: ('wheat', 11),
        10: ('ore', 12),
        11: ('desert', 7),
        12: ('wood', 6),
        13: ('wheat', 2),
        14: ('ore', 3),
        15: ('wood', 4),
        16: ('brick', 5),
        17: ('sheep', 6),
        18: ('wheat', 8),
        19: ('ore', 9)
    }

    player_settlements = {
        1: [1, 3, 5, 7, 13],
        2: [2, 4, 6, 8, 15],
        3: [8, 9, 10, 12, 17],
    }
    player_cities = {
        1: [1, 5],
        2: [4, 8],
        3: [10],
    }

    # 2. Set the simulation parameters
    num_simulations = 1000  # Increase for more robust statistics
    num_turns = 500  # Or adjust as needed

    # 3. Run the simulation
    simulation_data = catan_simulator(num_simulations, num_turns, catan_board, player_settlements, player_cities)

    # 4. Analyze the simulation data
    analyze_simulation_data(simulation_data)

    # 5. Calculate stability metrics
    stability_metrics = calculate_stability_metrics(simulation_data)
    print("\n--- Stability Metrics ---")
    print(stability_metrics)

    # 6. Plot the results for a specific player (e.g., Player 1)
    plot_resource_trends(simulation_data, player_number=1)
    plot_settlement_city_trends(simulation_data, player_number=1)
